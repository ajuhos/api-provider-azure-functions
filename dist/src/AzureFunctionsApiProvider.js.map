{"version":3,"file":"AzureFunctionsApiProvider.js","sourceRoot":"","sources":["../../src/AzureFunctionsApiProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeError, ApiEdgeQueryStreamResponse, Api, ApiRequestType} from \"api-core\";\nimport {ApiQueryStringParser} from \"./ApiQueryStringParser\";\n\nexport interface AzureFunctionsRequest {\n    query: any\n    params: any\n    body: any\n    method: string,\n    user: any\n}\n\nexport class AzureFunctionsApiProvider {\n    defaultApi: Api;\n    constructor(api: Api) {\n        this.defaultApi = api;\n    }\n\n    processRequest = async (req: AzureFunctionsRequest) => {\n        //TODO: Support versions\n\n        try {\n            let request = this.defaultApi.parseRequest(\n                Object.keys(req.params).map(p => req.params[p])\n            );\n\n            if(!request.path.segments.length) {\n                return {\n                    status: 404,\n                    body: \"Not Found\",\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                }\n            }\n\n            request.context = ApiQueryStringParser.parse(req.query, request.path);\n\n            if (req.body) {\n                request.body = req.body;\n            }\n\n            //TODO: Add support for streams\n\n            switch(req.method) {\n                case \"GET\":\n                    request.type = ApiRequestType.Read;\n                    break;\n                case \"POST\":\n                    request.type = ApiRequestType.Create;\n                    break;\n                case \"PUT\":\n                    request.type = ApiRequestType.Update;\n                    break;\n                case \"PATCH\":\n                    request.type = ApiRequestType.Patch;\n                    break;\n                case \"DELETE\":\n                    request.type = ApiRequestType.Delete;\n                    break;\n            }\n\n            let query = this.defaultApi.buildQuery(request);\n            query.request = request;\n\n            //TODO: req.user - Is this an acceptable solution?\n            const resp = await query.execute(req.user);\n\n            const headers: any = {\n                'Content-Type': 'application/json'\n            };\n\n            if(resp.metadata) {\n                if(resp.metadata.pagination) {\n                    const total = resp.metadata.pagination.total || 0,\n                        limit = +req.query.limit || ApiQueryStringParser.defaultLimit;\n                    headers['X-Total-Count'] = req.query.page ? Math.ceil(total / limit) : total;\n                }\n\n                if(resp.metadata.contentType) {\n                    headers['Content-Type'] = resp.metadata.contentType\n                }\n\n                if(resp.metadata.headers) {\n                    const headerNames = Object.keys(resp.metadata.headers);\n                    for(let header of headerNames) {\n                        headers[header] = resp.metadata.headers[header]\n                    }\n                }\n            }\n\n            if(resp instanceof ApiEdgeQueryStreamResponse) {\n                //TODO: add support for streams\n                throw new ApiEdgeError(500, 'Streams are not yet supported.')\n            }\n            else {\n                return {\n                    headers,\n                    body: resp.data\n                }\n            }\n        }\n        catch (e) {\n            return {\n                status: e.status,\n                body: e.message,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }\n        }\n    }\n}"]}